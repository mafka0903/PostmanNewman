{
	"info": {
		"_postman_id": "86e57f56-7a12-4077-ab83-2c4fa224a4ff",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19661988"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const productTest = JSON.parse(pm.variables.get(\"productTest\"));",
									"const productSchema = JSON.parse(pm.variables.get(\"productSchema\"));",
									"",
									"//Act",
									"const responseJson = pm.response.json();",
									"pm.variables.set(\"productGetById\", responseJson.id); //у зміннy productGetById встанов ID з нового створ прод",
									"",
									"const product = JSON.parse(pm.variables.get(\"productUpdate\")); // візьми змінну productUpdate ",
									"product.id = responseJson.id; //в змінну продуктІД записую ІД з нового створеного продукту",
									"pm.variables.set(\"productUpdate\", JSON.stringify(product)); // записую в глобальні змінні для подальш використ",
									"",
									"//Assert",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"Created\");",
									"});",
									"pm.test(\"Response matches the product schema\", function () {",
									"    pm.expect(responseJson).to.be.jsonSchema(productSchema);",
									"});",
									"pm.test(\"Product is corect\", () => {",
									"  pm.expect(responseJson.name).to.eql(productTest.name);",
									"  pm.expect(responseJson.price).to.eql(productTest.price);",
									"  pm.expect(responseJson.sku).to.eql(productTest.sku);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{productTest}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange\r",
									"const productsSchema = JSON.parse(pm.variables.get(\"productsSchema\"));\r",
									"const productTest = JSON.parse(pm.variables.get(\"productTest\"));\r",
									"\r",
									"//Act\r",
									"const products = pm.response.json();\r",
									"\r",
									"//Assert\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response matches the products schema\", function () {\r",
									"    pm.expect(products).to.be.jsonSchema(productsSchema);\r",
									"});\r",
									"pm.test(\"Response contains new created product\", () => {\r",
									"    pm.expect(products).to.be.an('array').that.is.not.empty;\r",
									"    const productExist = products.some(product => product.name === productTest.name && product.sku === productTest.sku);\r",
									"    pm.expect(productExist).to.be.true;\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange\r",
									"const pageSize = 2; \r",
									"\r",
									"//Act\r",
									"const products = pm.response.json();\r",
									"const productsOnPage = products.length;\r",
									"\r",
									"//Assert\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response contains two users on the page\", () => {\r",
									"   pm.expect(productsOnPage).to.eql(pageSize);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page=2&pageSize=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sorting products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange\r",
									"\r",
									"\r",
									"//Act\r",
									"const products = pm.response.json();\r",
									"const sortedProducts = [...products].sort((a, b) => a.name.localeCompare(b.name));\r",
									"\r",
									"//Assert\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", () => {\r",
									"  pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Products are sorted by name\", () => {\r",
									"    pm.expect(products).to.eql(sortedProducts);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const productID = pm.variables.get(\"productGetById\");",
									"",
									"//Act",
									"const responseJson = pm.response.json();",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"ID found\", () => {",
									"  pm.expect(responseJson.id).to.eql(parseInt(productID));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productGetById}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productGetById}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by not exist ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"//Act",
									"",
									"//Assert",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Product not founded\", () => {",
									"  pm.response.to.have.status(\"Not Found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products{{productNotExisting}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products{{productNotExisting}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const updatedProduct = JSON.parse(pm.variables.get(\"productUpdate\"));",
									"const productSchema = JSON.parse(pm.variables.get(\"productSchema\"));",
									"",
									"//Act",
									" const responseJson = pm.response.json();",
									" ",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response matches the product schema\", function () {",
									"    pm.expect(responseJson).to.be.jsonSchema(productSchema);",
									"});",
									"pm.test(\"Product is changed\", () => {",
									"  pm.expect(responseJson.name).to.eql(updatedProduct.name);",
									"  pm.expect(responseJson.price).to.eql(updatedProduct.price);",
									"  pm.expect(responseJson.sku).to.eql(updatedProduct.sku);",
									"  pm.expect(responseJson.description).to.eql(updatedProduct.description);",
									"  pm.expect(responseJson.id).to.eql(updatedProduct.id);",
									"  ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{productUpdate}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update not exist product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"//Act",
									"",
									"",
									"//Assert",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Product not found\", () => {",
									"  pm.response.to.have.status(\"Not Found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{productNotExisting}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"//Act",
									"",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productGetById}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productGetById}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const orderTest = JSON.parse(pm.variables.get(\"orderTest\"));",
									"const orderSchema = JSON.parse(pm.variables.get(\"orderSchema\"));",
									"",
									"//Act",
									"const responseJson = pm.response.json();",
									"pm.variables.set(\"orderGetById\", responseJson.id); ",
									"",
									"const order = JSON.parse(pm.variables.get(\"orderUpdate\"));",
									"order.id = responseJson.id; ",
									"pm.variables.set(\"orderUpdate\", JSON.stringify(order));",
									"",
									"//Assert",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"Created\");",
									"});",
									"pm.test(\"Response matches the order schema\", function () {",
									"    pm.expect(responseJson).to.be.jsonSchema(orderSchema);",
									"});",
									"pm.test(\"Product is corect\", () => {",
									"  pm.expect(responseJson.name).to.eql(orderTest.name);",
									"  pm.expect(responseJson.sku).to.eql(orderTest.sku);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const ordersSchema = JSON.parse(pm.variables.get(\"ordersSchema\"));",
									"const orderTest = JSON.parse(pm.variables.get(\"orderTest\"));",
									"",
									"//Act",
									"const orders = pm.response.json();",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response matches the orders schema\", function () {",
									"    pm.expect(orders).to.be.jsonSchema(ordersSchema);",
									"});",
									"pm.test(\"Response contains new created order\", () => {",
									"    pm.expect(orders).to.be.an('array').that.is.not.empty;",
									"    const orderExist = orders.some(order => order.name === orderTest.name && order.sku === orderTest.sku);",
									"    pm.expect(orderExist).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "List orders pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const pageSize = 3; ",
									"",
									"//Act",
									"const orders = pm.response.json();",
									"const ordersOnPage = orders.length;",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response contains three orders on the page\", () => {",
									"   pm.expect(ordersOnPage).to.eql(pageSize);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?page=1&pageSize=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sorting orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"",
									"//Act",
									"const orders = pm.response.json();",
									"const sortedOrders = [...orders].sort((a, b) => a.id - b.id);",
									"",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Products are sorted by id\", () => {",
									"    pm.expect(orders).to.eql(sortedOrders);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?sortOrder=ASC&sortKey=id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const orderID = pm.variables.get(\"orderGetById\");",
									"",
									"//Act",
									"const responseJson = pm.response.json();",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"ID found\", () => {",
									"  pm.expect(responseJson.id).to.eql(parseInt(orderID));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderGetById}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderGetById}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by not exist ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"//Act",
									"",
									"//Assert",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Order not founded\", () => {",
									"  pm.response.to.have.status(\"Not Found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderNotExist}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderNotExist}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const orderUpdate = JSON.parse(pm.variables.get(\"orderUpdate\"));",
									"const orderSchema = JSON.parse(pm.variables.get(\"orderSchema\"));",
									"",
									"//Act",
									" const responseJson = pm.response.json();",
									" ",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response matches the order schema\", function () {",
									"    pm.expect(responseJson).to.be.jsonSchema(orderSchema);",
									"});",
									"pm.test(\"Order is changed\", () => {",
									"  pm.expect(responseJson.name).to.eql(orderUpdate.name);",
									"  pm.expect(responseJson.sku).to.eql(orderUpdate.sku);",
									"  ",
									"  ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{orderUpdate}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update not exist order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"//Act",
									"",
									"",
									"//Assert",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"Order not found\", () => {",
									"  pm.response.to.have.status(\"Not Found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{orderNotExist}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"//Act",
									"",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/{{orderGetById}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"{{orderGetById}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const testUser = JSON.parse(pm.variables.get(\"testUser\"));",
									"const userSchema = JSON.parse(pm.variables.get(\"userSchema\"));",
									"",
									"//Act",
									"const responseJson = pm.response.json();",
									"pm.variables.set(\"createdUserId\", responseJson.id);",
									"",
									"const user = JSON.parse(pm.variables.get(\"checkUpdateUser\"));",
									"user.id = responseJson.id;",
									"pm.variables.set(\"checkUpdateUser\", JSON.stringify(user));",
									"",
									"",
									"//Assert",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"Created\");",
									"});",
									"pm.test(\"Response matches the user schema\", function () {",
									"    pm.expect(responseJson).to.be.jsonSchema(userSchema);",
									"});",
									"pm.test(\"Person is corect\", () => {",
									"  pm.expect(responseJson.firstName).to.eql(testUser.firstName);",
									"  pm.expect(responseJson.lastName).to.eql(testUser.lastName);",
									"  pm.expect(responseJson.email).to.eql(testUser.email);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{testUser}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const testUser = JSON.parse(pm.environment.get(\"testUser\"));",
									"const usersSchema = JSON.parse(pm.environment.get(\"usersSchema\"));",
									"",
									"//Act",
									"const users = pm.response.json();",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response matches the users schema\", function () {",
									"    pm.expect(users).to.be.jsonSchema(usersSchema);",
									"});",
									"pm.test(\"Response contains new created user\", () => {",
									"    pm.expect(users).to.be.an('array').that.is.not.empty;",
									"    const userExists = users.some(user => user.firstName === testUser.firstName && user.email === testUser.email);",
									"    pm.expect(userExists).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List users pagination",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const pageSize = 3; ",
									"",
									"//Act",
									"const users = pm.response.json();",
									"const usersOnPage = users.length;",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response contains three users on the page\", () => {",
									"   pm.expect(usersOnPage).to.eql(pageSize);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=3&pageSize=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								},
								{
									"key": "pageSize",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sorting users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"",
									"//Act",
									"const users = pm.response.json();",
									"const sortedUsers = [...users].sort((a, b) => a.email.localeCompare(b.email));",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Users are sorted by email ASC\", () => {",
									"    pm.expect(users).to.eql(sortedUsers);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?sortOrder=ASC&sortKey=email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "email"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const userId = pm.variables.get(\"createdUserId\");",
									"",
									"//Act",
									"const responseJson = pm.response.json();",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"ID found\", () => {",
									"  pm.expect(responseJson.id).to.eql(parseInt(userId));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{createdUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{createdUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by not exist ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"//Act",
									"",
									"//Assert",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"User not founded\", () => {",
									"  pm.response.to.have.status(\"Not Found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{notExistingUser}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{notExistingUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"const updatedUser = JSON.parse(pm.variables.get(\"checkUpdateUser\"));",
									"const userSchema = JSON.parse(pm.variables.get(\"userSchema\"));",
									"",
									"//Act",
									" const responseJson = pm.response.json();",
									" ",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									"pm.test(\"Response matches the user schema\", function () {",
									"    pm.expect(responseJson).to.be.jsonSchema(userSchema);",
									"});",
									"pm.test(\"Person is changed\", () => {",
									"  pm.expect(responseJson.firstName).to.eql(updatedUser.firstName);",
									"  pm.expect(responseJson.lastName).to.eql(updatedUser.lastName);",
									"  pm.expect(responseJson.email).to.eql(updatedUser.email);",
									"  pm.expect(responseJson.dateOfBirth).to.eql(updatedUser.dateOfBirth);",
									"  pm.expect(responseJson.emailVerified).to.eql(updatedUser.emailVerified);",
									"  pm.expect(responseJson.signUpDate).to.eql(updatedUser.signUpDate);",
									"  pm.expect(responseJson.status).to.eql(updatedUser.status);",
									"  pm.expect(responseJson.level).to.eql(updatedUser.level);",
									"  pm.expect(responseJson.id).to.eql(updatedUser.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{checkUpdateUser}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update not exist user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"//Act",
									"",
									"",
									"//Assert",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"pm.test(\"User not found\", () => {",
									"  pm.response.to.have.status(\"Not Found\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{notExistingUser}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Arrange",
									"",
									"//Act",
									"",
									"",
									"//Assert",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Status code name has string\", () => {",
									"  pm.response.to.have.status(\"OK\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{createdUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{createdUserId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 200ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(200);",
					"});",
					"",
					"pm.test(\"Content-Type is present\", function () {",
					"    pm.response.to.have.header(\"Content-Type\");",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}